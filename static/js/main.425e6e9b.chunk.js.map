{"version":3,"sources":["Todo.js","Filter.js","App.js","serviceWorker.js","index.js"],"names":["StyledTodo","styled","_ref","className","id","todos","completed","markCom","removeTodo","react_default","a","createElement","type","checked","onChange","onClick","_templateObject","props","displayName","StyledFilter","all","active","done","Filter_templateObject","StyledApp","_useState","useState","_useState2","Object","slicedToArray","input","setInput","_useState3","_useState4","setTodos","_useState5","_useState6","display","setDisplay","useEffect","JSON","parse","localStorage","getItem","setLocalStorage","dataSaveInLS","setItem","stringify","filter","todo","map","objectSpread","onSubmit","e","preventDefault","trim","length","alert","newTodo","uuid","v4","title","concat","toConsumableArray","placeholder","value","target","src_Todo","key","src_Filter","App_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0+BAIA,IAgBMA,EAAaC,YAhBN,SAAAC,GAA4D,IAA1DC,EAA0DD,EAA1DC,UAAWC,EAA+CF,EAA/CE,GAAIC,EAA2CH,EAA3CG,MAAOC,EAAoCJ,EAApCI,UAAWC,EAAyBL,EAAzBK,QAASC,EAAgBN,EAAhBM,WACvD,OACEC,EAAAC,EAAAC,cAAA,OAAKR,UAAWA,EAAWG,UAAWA,GACpCG,EAAAC,EAAAC,cAAA,OAAKR,UAAU,QACfM,EAAAC,EAAAC,cAAA,SAAQC,KAAK,WAAWC,QAASP,EAAWQ,SAAU,kBAAIP,EAAQH,MAClEK,EAAAC,EAAAC,cAAA,OAAKR,UAAU,YAAYE,GAC3BI,EAAAC,EAAAC,cAAA,OAAKR,UAAU,SAASY,QAAS,kBAAIP,EAAWJ,KAAhD,QAUaH,CAAHe,IAqBQ,SAAAC,GAAK,OAAGA,EAAMX,UAAW,eAAiB,SAoBlEN,EAAWkB,YAAc,OAEVlB,2YC3Dd,IAaKmB,EAAelB,YAbL,SAAAC,GAAoC,IAAlCC,EAAkCD,EAAlCC,UAAWiB,EAAuBlB,EAAvBkB,IAAKC,EAAkBnB,EAAlBmB,OAAQC,EAAUpB,EAAVoB,KACvC,OACEb,EAAAC,EAAAC,cAAA,OAAKR,UAAWA,GAChBM,EAAAC,EAAAC,cAAA,UAAQI,QAASK,GAAjB,OACAX,EAAAC,EAAAC,cAAA,UAAQI,QAASM,GAAjB,UACAZ,EAAAC,EAAAC,cAAA,UAAQI,QAASO,GAAjB,eAQgBrB,CAAHsB,KAyBlBJ,EAAaD,YAAc,SAEZC,2pDCrCf,IA4FMK,EAAYvB,YA5FN,SAAAC,GAAmB,IAAhBC,EAAgBD,EAAhBC,UAAgBsB,EACHC,mBAAS,IADNC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACtBK,EADsBH,EAAA,GACfI,EADeJ,EAAA,GAAAK,EAEHN,mBAAS,IAFNO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEtB3B,EAFsB4B,EAAA,GAEfC,EAFeD,EAAA,GAAAE,EAGCT,mBAAS,IAHVU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAGtBE,EAHsBD,EAAA,GAGbE,EAHaF,EAAA,GAK7BG,oBAAU,WACRL,EAASM,KAAKC,MAAMC,aAAaC,QAAQ,uBAAyB,IAClEL,EAAWE,KAAKC,MAAMC,aAAaC,QAAQ,uBAAyB,KACnE,IAEH,IAAMC,EAAkB,SAACC,GACvBX,EAASW,GACTP,EAAWO,GACXH,aAAaI,QAAQ,oBAAqBN,KAAKO,UAAUF,KAYrDrC,EAAa,SAACJ,GAClB,IAAMyC,EAAexC,EAAM2C,OAAO,SAACC,GAAD,OAAUA,EAAK7C,KAAOA,IACxDwC,EAAgBC,IAGZtC,EAAU,SAACH,GACf,IAAMyC,EAAexC,EAAM6C,IAAI,SAACD,GAC9B,OAAIA,EAAK7C,KAAOA,EAAWwB,OAAAuB,EAAA,EAAAvB,CAAA,GAAKqB,EAAZ,CAAkB3C,WAAY2C,EAAK3C,YAChD2C,IAETL,EAAgBC,IAWlB,OACEpC,EAAAC,EAAAC,cAAA,OAAKR,UAAWA,GACdM,EAAAC,EAAAC,cAAA,OAAKR,UAAU,SACbM,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAA,oDAGFF,EAAAC,EAAAC,cAAA,OAAKR,UAAU,iBACbM,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,OAAKR,UAAU,YAAf,iCAGFM,EAAAC,EAAAC,cAAA,OAAKR,UAAU,QACbM,EAAAC,EAAAC,cAAA,QAAMyC,SA3CI,SAACC,GAEf,GADAA,EAAEC,iBACExB,EAAMyB,OAAOC,OAAS,EAAG,OAAOC,MAAM,kCAC1C,IAAMC,EAAU,CAAEtD,GAAIuD,IAAKC,KAAMC,MAAO/B,EAAOxB,WAAW,GACpDuC,EAAY,GAAAiB,OAAAlC,OAAAmC,EAAA,EAAAnC,CAAOvB,GAAP,CAAcqD,IAChC3B,EAAS,IACTa,EAAgBC,KAsCVpC,EAAAC,EAAAC,cAAA,SACER,UAAU,WACVS,KAAK,OACLoD,YAAY,4BACZC,MAAOnC,EACPhB,SAAU,SAACuC,GAAD,OAAOtB,EAASsB,EAAEa,OAAOD,UAErCxD,EAAAC,EAAAC,cAAA,UAAQR,UAAU,OAAlB,SAIJM,EAAAC,EAAAC,cAAA,WACG0B,EAAQa,IAAI,SAACD,GAAD,OACXxC,EAAAC,EAAAC,cAACwD,EAAD,CACEC,IAAKnB,EAAK7C,GACVA,GAAI6C,EAAK7C,GACTC,MAAO4C,EAAKY,MACZvD,UAAW2C,EAAK3C,UAChBE,WAAYA,EACZD,QAASA,OAIfE,EAAAC,EAAAC,cAAC0D,EAAD,CAAQjD,IA7CA,kBAAMkB,EAAWjC,IA6CPgB,OA3CP,kBACbiB,EAAWjC,EAAM2C,OAAO,SAACC,GAAD,OAA6B,IAAnBA,EAAK3C,cA0CHgB,KAxCzB,kBACXgB,EAAWjC,EAAM2C,OAAO,SAACC,GAAD,OAA6B,IAAnBA,EAAK3C,kBAgDzBL,CAAHqE,KA2Ff9C,EAAUN,YAAc,MAETM,QCpLK+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.425e6e9b.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components' \nimport PropTypes from 'prop-types'\n\nconst Todo = ({className, id, todos, completed, markCom, removeTodo}) => {\n  return (\n    <div className={className} completed={completed}>\n      <div className='list'>\n      <input  type='checkbox' checked={completed} onChange={()=>markCom(id)} /> \n      <div className='todolist'>{todos}</div> \n      <div className='button' onClick={()=>removeTodo(id)}>X</div>\n      </div>\n    </div>\n  )\n}\n\nTodo.propTypes = {\n  className: PropTypes.string\n}\n\nconst StyledTodo = styled(Todo)`\n  font-family: Arial, sans-serif;\n  background-color: #5F9EA0;\n  border-bottom: 1px solid #FFE4C4; \n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-content: center;\n  color: #800000;\n  &:hover {\n    color: #D2691E;\n  }\n  \n  .list{\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n\n  .todolist{\n    padding-right: 15px;  \n    text-decoration: ${ props =>props.completed? 'line-through' : 'none'};\n  }\n\n  input, .button{\n    width: 50px;\n    height: 50px;\n  }\n\n  .button{\n    color: #FFE4C4;\n    padding: 0;\n    margin: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: #483D8B;\n    border-radius: 10px;\n  }\n\n`\nStyledTodo.displayName = 'Todo'\n\nexport default StyledTodo;\n","import React from 'react' \nimport styled from 'styled-components' \nimport PropTypes from 'prop-types'\n\n const Filter = ({className, all, active, done}) => {\n   return (\n     <div className={className}>\n     <button onClick={all}>All</button>\n     <button onClick={active}>Active</button>\n     <button onClick={done}>Completed</button>\n     </div>\n   )\n }\n Filter.propTypes = {\n  className: PropTypes.string\n}\n\nconst StyledFilter = styled(Filter)`\n  background-color: #5F9EA0;\nbutton{\n  border-radius: 10px;\n  width: 120px;\n  height: 50px;\n  font-size: 20px;\n  color: #FFE4C4;\n  background-color: #483D8B;\n}\n\n@media (min-width: 769px){\n  button{\n    margin: 0 10px;\n  }  \n}\n\n\n@media (max-width: 768px){\n  button{\n    margin: 0 3px;\n  }  \n}\n\n`\nStyledFilter.displayName = 'Filter'\n\nexport default StyledFilter;\n\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport Todo from './Todo';\nimport Filter from './Filter';\nimport uuid from 'uuid';\n\nconst App = ({ className }) => {\n  const [input, setInput] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [display, setDisplay] = useState([]);\n\n  useEffect(() => {\n    setTodos(JSON.parse(localStorage.getItem('localStorageTodos')) || []);\n    setDisplay(JSON.parse(localStorage.getItem('localStorageTodos')) || []);\n  }, []);\n\n  const setLocalStorage = (dataSaveInLS) => {\n    setTodos(dataSaveInLS);\n    setDisplay(dataSaveInLS);\n    localStorage.setItem('localStorageTodos', JSON.stringify(dataSaveInLS));\n  };\n\n  const addTodo = (e) => {\n    e.preventDefault();\n    if (input.trim().length < 3) return alert('please add more than 3 letters');\n    const newTodo = { id: uuid.v4(), title: input, completed: false };\n    const dataSaveInLS = [...todos, newTodo];\n    setInput('');\n    setLocalStorage(dataSaveInLS);\n  };\n\n  const removeTodo = (id) => {\n    const dataSaveInLS = todos.filter((todo) => todo.id !== id);\n    setLocalStorage(dataSaveInLS);\n  };\n\n  const markCom = (id) => {\n    const dataSaveInLS = todos.map((todo) => {\n      if (todo.id === id) return { ...todo, completed: !todo.completed };\n      return todo;\n    });\n    setLocalStorage(dataSaveInLS);\n  };\n\n  const all = () => setDisplay(todos);\n\n  const active = () =>\n    setDisplay(todos.filter((todo) => todo.completed === false));\n\n  const done = () =>\n    setDisplay(todos.filter((todo) => todo.completed === true));\n\n  return (\n    <div className={className}>\n      <div className='title'>\n        <div>The things that you forget,</div>\n        <div>are the things not that important...</div>\n      </div>\n\n      <div className='add-something'>\n        <div>Add something</div>\n        <div className='computer'>, and press 'ENTER' to input</div>\n      </div>\n\n      <div className='body'>\n        <form onSubmit={addTodo}>\n          <input\n            className='inputbox'\n            type='text'\n            placeholder='What should I do later...'\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n          />\n          <button className='add'>Add</button>\n        </form>\n      </div>\n\n      <div>\n        {display.map((todo) => (\n          <Todo\n            key={todo.id}\n            id={todo.id}\n            todos={todo.title}\n            completed={todo.completed}\n            removeTodo={removeTodo}\n            markCom={markCom}\n          />\n        ))}\n      </div>\n      <Filter all={all} active={active} done={done} />\n    </div>\n  );\n};\n\nApp.propTypes = {\n  className: PropTypes.string\n};\n\nconst StyledApp = styled(App)`\n  text-align: center;\n  font-size: 32px;\n  letter-spacing: 2px;\n\n  .title {\n    font-family: oblique, serif;\n    height: 150px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #ffe4c4;\n    background-color: #5f9ea0;\n    div {\n      display: flex;\n    }\n  }\n\n  .add-something {\n    height: 100px;\n    font-size: 20px;\n    font-family: 'Comic Sans MS', cursive, sans-serif;\n    padding-bottom: 10px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #483d8b;\n    background-color: #5f9ea0;\n  }\n\n  .body {\n    color: #5f9ea0;\n    background-color: #ffe4c4;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .inputbox {\n    padding: 10px;\n    width: 300px;\n    height: 30px;\n    border-radius: 5px;\n    border: 2px solid gray;\n    background: rgba(4, 93, 93, 0.7);\n    color: white;\n    font-size: 24px;\n  }\n\n  @media (min-width: 769px) {\n    input {\n      margin: 50px 20px;\n    }\n\n    .add {\n      display: none;\n    }\n  }\n\n  @media (max-width: 768px) {\n    input {\n      margin: 50px 20px 20px 20px;\n    }\n\n    .add {\n      margin-top: 20px;\n      margin-bottom: 50px;\n      width: 330px;\n      height: 50px;\n      border-radius: 10px;\n      font-size: 20px;\n      color: #ffe4c4;\n      background-color: #8b4513;\n    }\n\n    .computer {\n      display: none;\n    }\n  }\n\n  @media (min-width: 900px) {\n    .title {\n      flex-direction: row;\n    }\n  }\n\n  @media (max-width: 899px) {\n    .title {\n      flex-direction: column;\n    }\n  }\n`;\nStyledApp.displayName = 'App';\n\nexport default StyledApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}